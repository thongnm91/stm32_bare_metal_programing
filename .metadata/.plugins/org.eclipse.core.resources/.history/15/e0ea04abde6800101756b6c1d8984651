#include <stddef.h>
#include "stm32l1xx.h"

#include "include.h"
#include "debug/debug_logs.h"
#include "i2c/i2c.h"
#include "sgp30_driver/sgp30.h"

typedef struct {
    uint16_t co2_ppm;
    uint16_t tvoc_ppb;
    uint8_t status;
    uint8_t ver_num;
	uint8_t ver_name;
} SGP30_Data_t;



int Initial();
int SGP30_Get_Feature_Ver(uint8_t* ver_name, uint8_t* ver_num);

int main(void)
{
	char buf[50]={0};
	SGP30_Data_t air_quality;
	SGP30_Data_t air_baseline;

	//check_pass(Initial(),"Initial");
	Initial();



	//check_pass(SGP30_Init(),"SGP30_Init");
	SGP30_Init();

	systickDelayMs(10);


  while (1)
  {
	  uart2_write_string("-----------------------\n\r");
	  //check_pass(SGP30_Measure(&air_quality.co2_ppm, &air_quality.tvoc_ppb),"SGP30_Measure");
	  SGP30_Measure(&air_quality.co2_ppm, &air_quality.tvoc_ppb);

	  sprintf(buf,"CO2 %u ppm\n\r",(unsigned int)air_quality.co2_ppm);
	  uart2_write_string(buf);
	  sprintf(buf,"TVOC %u ppm\n\r",(unsigned int)air_quality.tvoc_ppb);
	  uart2_write_string(buf);
	  systickDelayMs(12);


	  uart2_write_string("-----------------------\n\r");
	  //check_pass(SGP30_Get_Baseline(&air_baseline.co2_ppm, &air_baseline.tvoc_ppb),"SGP30_Get_Baseline");
	  SGP30_Get_Baseline(&air_baseline.co2_ppm, &air_baseline.tvoc_ppb);

	  sprintf(buf,"CO2 %u ppm\n\r",(unsigned int)air_baseline.co2_ppm);
	  uart2_write_string(buf);
	  sprintf(buf,"TVOC %u ppm\n\r",(unsigned int)air_baseline.tvoc_ppb);
	  uart2_write_string(buf);
	  systickDelayMs(12);

	  uart2_write_string("-----------------------\n\r");
	  check_pass(SGP30_Get_Feature_Ver(&air_quality.ver_name, &air_quality.ver_num),"SGP30_Get_Feature_Ver");

	  systickDelayMs(1000);
  }

	return DONE;
}

int Initial(){

	SetSysClk();
	SystemCoreClockUpdate();
	uart2_init();
	I2C1_GPIO_Init();
	I2C1_Init();
	return DONE;
}
int SGP30_Get_Feature_Ver(uint8_t* ver_name, uint8_t* ver_num){
	uint8_t data[3]={0};
	check_pass(Write_Cmd(CMD_GET_FEATURE_SET,NSTOP),"CMD_GET_BASELINE");
	//Write_Cmd(CMD_GET_FEATURE_SET,NSTOP);
	systickDelayMs(10);

	check_pass(Read_Data(data, 3),"-READ_CMD_MEASURE");
	//Read_Data(data, 3);

	// CRC checks
     if (crc(&data[0], 2) != data[2]) {
     	 uart2_write_string("CRC check failed\n\r");
     	 return -1; // CRC fail
     }


    *ver_name = (data[0] >> 4);
    *ver_num = (data[1]);

	return DONE;
}
